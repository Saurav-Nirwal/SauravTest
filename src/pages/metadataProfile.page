<apex:page showHeader="false">
    <apex:includeScript value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/js/jquery.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/js/blockui.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/js/bootstrap.js')}" />  
    <apex:includeScript value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/js/bootstrap.min.js')}" /> 
    <apex:includeScript value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/js/angular.min.js')}" /> 
    <apex:stylesheet value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/css/style.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/css/style.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.WrappedBootstrap, 'WrapedBootstrap/css/font-awesome.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.jsforce)}"/> 
    <apex:includeScript value="{!URLFOR($Resource.jszip)}"/>
    
    <apex:actionstatus id="lad">  
        <apex:facet name="start">
            <div class="waitingSearchDiv" id="el_loading" style="background-color: #E6EBF5; height: 100%;opacity:0.85;width:100%;z-index: 9999999;position: fixed;top: 0;left: 0;"> 
                <div class="waitingHolder" >
                    <img class="waitingImage" src="{!$Resource.BlockUi1}" title="Please Wait..."/>
                    <span class="waitingDescription" style="color:#2A7D2A;">Please Wait...</span>
                </div>          
            </div>   
        </apex:facet>  
    </apex:actionstatus>
    
    <apex:form ><br/>
        <div class="bootstrapped">
            <div class="container">
                <div class="panel panel-primary">
                    <div class="panel-heading"><h4>Authorization</h4></div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-xs-12 col-sm-2 col-md-2 col-md-offset-1 col-sm-offset-0">
                                    <apex:outputLabel value="Profile Name"/>
                                </div>
                                <div class="col-xs-12 col-sm-3 col-md-2">  
                                    <select id="SelectList" class="form-control"/>
                                </div>
                            </div><br/>
                        <div class="row">
                            <div class="col-xs-12 col-sm-2 col-md-2 col-md-offset-1 col-sm-offset-0">
                                <apex:outputLabel value="Login" />
                            </div>
                            <div class="col-xs-12 col-sm-3 col-md-2">
                                <input type="text" id="login" class="form-control req" placeholder="Username"/>
                            </div>
                            <div class="col-xs-12 col-sm-2 col-md-2 col-md-offset-1 col-sm-offset-0">
                                <apex:outputLabel value="Password" />
                            </div>
                            <div class="col-xs-12 col-sm-3 col-md-2">
                                <input type="password" id="pass" class="form-control req" placeholder="Password"/>
                            </div>
                        </div>
                        </div>
                    <div class="panel-footer">
                        <center><apex:commandButton value="Start Auth" onclick="listLayouts();" rerender="none" styleclass="btn btn-primary"/></center>
                    </div>
                </div>
            </div>
        </div>
    </apex:form>
    <script>
        var sf = jsforce;
        var conn1;
        var apiVersion = '36';
        var permissionMap = {};
        permissionMap['CustomObject'] = ['*'];
        permissionMap['ApexClass'] = ['*'];
        permissionMap['ApexPage'] = ['*'];
        permissionMap['Layout'] = ['*'];
      
        permissionMap['CustomApplication'] = ['*'];
        permissionMap['ExternalDataSource'] = ['*'];
        permissionMap['CustomPermission'] = ['*'];
        var selfConn = createSelfConnection();
        
        function showLoading()
        {
            $('[id$="start"]').show();
        }
        
        function hideLoading()
        {
            $('[id$="start"]').hide();
        }
        
        /*function recordDetail()
        {
            var config =  { logLevel: "DEBUG" ,proxyUrl: "/services/proxy",loginUrl : 'https://login.salesforce.com'};
            conn1 = new sf.Connection(config);                
            
            var SF_USERNAME_1 = document.getElementById('login').value;
            var SF_PASSWORD_1 = document.getElementById('pass').value;                  
            
            conn1.login(SF_USERNAME_1, SF_PASSWORD_1, cb);
        }*/
        
        function cb(err, userInfo) 
        {
           if (err) { return console.error(err); }
           console.log(userInfo);
        }
                
        function createSelfConnection()
        {
            var conn = new jsforce.Connection({ accessToken: '{!$Api.Session_Id}' });
            conn.metadata.pollTimeout = 12000000;
            conn.metadata.pollInterval = 4000;
            return conn;
        }
        
        function getRetrieveRequest()
        {
            var retrieveRequest = new Object();
            retrieveRequest.apiVersion = apiVersion;
            retrieveRequest.singlePackage = true;
            retrieveRequest.unpackaged = {};
            retrieveRequest.unpackaged.types = [];
            return retrieveRequest;
        }
        
        function listCustomTabs()
        {
            var queryLi = [];
            var query = new Object();
            query.folder = '';
            query.type = 'CustomTab';
            queryLi.push(query);
            selfConn.metadata.list(queryLi, ''+apiVersion, function(err, result){
                if(err)
                {
                    console.log(err);
                }
                else
                {
                    var tempLi = [];
                    if(Array.isArray(result))
                    {
                        for(var index in result)
                        {
                            if(index < result.length)
                            {
                                var meta = result[index];
                                if(meta != undefined && meta.fullName != undefined)
                                {
                                    tempLi.push(meta.fullName);
                                }
                            }
                        }
                    }
                    else
                    {
                        var meta = result;
                        if(meta != undefined && meta.fullName != undefined)
                        {
                            tempLi.push(meta.fullName);
                        }
                    }
                    //if(tempLi.length > 0)
                        //permissionMap['CustomObject'] = tempLi;
                        console.log(tempLi);
                }
                //createRetrieveRequestForProfile();
           }); 
        }
        
        function listProfiles()
        {
            var queryLi = [];
            var query = new Object();
            query.folder = '';
            query.type = 'Profile';
            queryLi.push(query);
            selfConn.metadata.list(queryLi, ''+apiVersion, function(err, result){
                if(err)
                {
                    console.log(err);
                }
                else
                {
                    var metaItemLi = [];
                    var select = document.getElementById("SelectList");
                    if(Array.isArray(result))
                    {
                        for(var index in result)
                        {
                            if(index < result.length)
                            {
                                var meta = result[index];
                                if(meta != undefined && meta.lastModifiedDate != undefined)
                                {
                                    metaItemLi.push(meta);
                                }
                            }
                        }
                    }
                    console.log(metaItemLi);
                    for(var j = 0; j <metaItemLi.length; j++) 
                    {  
                        var el = document.createElement("option");
                        el.textContent = decodeURIComponent(metaItemLi[j].fullName);
                        el.value = metaItemLi[j].fullName + '##' +  metaItemLi[j].fileName;
                        select.appendChild(el);   
                    }
                }
            });
        }
        
        function listLayouts()
        {
            showLoading();
            var queryLi = [];
            var query = new Object();
            query.folder = '';
            query.type = 'Layout';
            queryLi.push(query);
            selfConn.metadata.list(queryLi, ''+apiVersion, function(err, result){
                if(err)
                {
                    console.log(err);
                }
                else
                {
                    var tempLi = [];
                    if(Array.isArray(result))
                    {
                        for(var index in result)
                        {
                            if(index < result.length)
                            {
                                var meta = result[index];
                                if(meta != undefined && meta.fullName != undefined && meta.fullName != 'SocialPost-Social Post Layout')
                                {
                                    tempLi.push(meta.fullName);
                                }
                            }
                        }
                    }
                    else
                    {
                        var meta = result;
                        if(meta != undefined && meta.fullName != undefined && meta.fullName != 'SocialPost-Social Post Layout')
                        {
                            tempLi.push(meta.fullName);
                        }
                    }
                    if(tempLi.length > 0)
                        permissionMap['Layout'] = tempLi;
                }
                listCustomObjects();
           }); 
        } 
        
        function listCustomObjects()
        {
            console.log('111111111111111');
            var queryLi = [];
            var query = new Object();
            query.folder = '';
            query.type = 'CustomObject';
            queryLi.push(query);
            selfConn.metadata.list(queryLi, ''+apiVersion, function(err, result){
                if(err)
                {
                    console.log(err);
                }
                else
                {
                    var tempLi = [];
                    if(Array.isArray(result))
                    {
                        for(var index in result)
                        {
                            if(index < result.length)
                            {
                                var meta = result[index];
                                if(meta != undefined && meta.fullName != undefined)
                                {
                                    tempLi.push(meta.fullName);
                                }
                            }
                        }
                    }
                    else
                    {
                        var meta = result;
                        if(meta != undefined && meta.fullName != undefined)
                        {
                            tempLi.push(meta.fullName);
                        }
                    }
                    if(tempLi.length > 0)
                        permissionMap['CustomObject'] = tempLi;
                }
                createRetrieveRequestForProfile();
           }); 
        }

        function createRetrieveRequestForProfile()
        {
            console.log('222222222222222');
            var profilename = document.getElementById('SelectList').value;
            var prof = profilename.split("##");
            var req = getRetrieveRequest();
            var oneType = {};
            oneType.name = 'Profile';
            oneType.members = [prof[0]];
            req.unpackaged.types.push(oneType);
            for(var key in permissionMap)
            {
                var tempType = {};
                tempType.name = key;
                tempType.members = permissionMap[key];
                req.unpackaged.types.push(tempType);
            }
            selfConn.metadata.retrieve(req).complete(function(err, result) {
                if (err) { console.error(err); }
                console.log(result);
                if(result.done == "true" && result.success == "true" && result.zipFile != undefined)
                {
                    var zipLast = new JSZip(result.zipFile, {base64:true});
                    var profileFile = zipLast.file(prof[1]);
                    
                    
                    if(profileFile != null && profileFile != undefined)
                    {
                        var deployZip = new JSZip();
                        deployZip.file(prof[1],profileFile.asBinary(),{binary:true});
                        var xml = '<?xml version="1.0" encoding="UTF-8"?><Package xmlns="http://soap.sforce.com/2006/04/metadata">'+
                                  '<types>'+
                                      '<members>'+prof[0]+'</members>'+
                                      '<name>Profile</name>'+
                                  '</types>'+
                                  '<version>'+apiVersion+'</version></Package>';
                        deployZip.file("package.xml",xml);
                        console.log(deployZip.files);
                        var base64Str = deployZip.generate({type:"base64",compression:"DEFLATE"});
                        startDeployment(base64Str );
                    }
                }
            }); 
        }
        
        function startDeployment(base64Str)
        {
           console.log('33333333333333');
            var config =  { logLevel: "DEBUG" ,proxyUrl: "/services/proxy"};
            conn1 = new sf.Connection(config);                
            
            var USERNAME = document.getElementById('login').value;
            var PASSWORD = document.getElementById('pass').value;                  
            
            conn1.login(USERNAME, PASSWORD, function(err, userInfo){
                if (err) { return console.error(err); }
                conn1.metadata.pollTimeout = 12000000;
                conn1.metadata.pollInterval = 4000;
                var deployOption = getDeployOptions();
                conn1.metadata.deploy(base64Str, deployOption ).complete(function(err2, result) {
                    if (err2) { console.error(err2); hideLoading();}
                    console.log(result);
                    hideLoading();
              });
            });
             /*var deployOption = getDeployOptions();
            selfConn.metadata.deploy(base64Str, deployOption )
              .complete(function(err, result) {
                if (err) { console.error(err); }
                console.log(result);
                hideLoading();
              });*/
            
        }
        
        function getDeployOptions()
        {
            var deployOption = new Object();
            deployOption.allowMissingFiles=true;
            deployOption.autoUpdatePackage=false;
            deployOption.checkOnly=true;
            deployOption.ignoreWarnings=false;
            deployOption.performRetrieve=false;
            deployOption.purgeOnDelete=false;
            deployOption.rollbackOnError=true;
            deployOption.singlePackage=true;
            console.log(deployOption);
            return deployOption;
        }
        
    </script>
    <script>
        listProfiles();
        listCustomTabs();
    </script>
</apex:page>